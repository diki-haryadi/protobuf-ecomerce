// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tokopedia/auth/v1/forgot_password.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForgotPasswordServiceClient is the client API for ForgotPasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForgotPasswordServiceClient interface {
	ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ForgotPasswordResponse, error)
}

type forgotPasswordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForgotPasswordServiceClient(cc grpc.ClientConnInterface) ForgotPasswordServiceClient {
	return &forgotPasswordServiceClient{cc}
}

func (c *forgotPasswordServiceClient) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ForgotPasswordResponse, error) {
	out := new(ForgotPasswordResponse)
	err := c.cc.Invoke(ctx, "/tokopedia.auth.v1.ForgotPasswordService/ForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForgotPasswordServiceServer is the server API for ForgotPasswordService service.
// All implementations should embed UnimplementedForgotPasswordServiceServer
// for forward compatibility
type ForgotPasswordServiceServer interface {
	ForgotPassword(context.Context, *ForgotPasswordRequest) (*ForgotPasswordResponse, error)
}

// UnimplementedForgotPasswordServiceServer should be embedded to have forward compatible implementations.
type UnimplementedForgotPasswordServiceServer struct {
}

func (UnimplementedForgotPasswordServiceServer) ForgotPassword(context.Context, *ForgotPasswordRequest) (*ForgotPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
}

// UnsafeForgotPasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForgotPasswordServiceServer will
// result in compilation errors.
type UnsafeForgotPasswordServiceServer interface {
	mustEmbedUnimplementedForgotPasswordServiceServer()
}

func RegisterForgotPasswordServiceServer(s grpc.ServiceRegistrar, srv ForgotPasswordServiceServer) {
	s.RegisterService(&ForgotPasswordService_ServiceDesc, srv)
}

func _ForgotPasswordService_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForgotPasswordServiceServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokopedia.auth.v1.ForgotPasswordService/ForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForgotPasswordServiceServer).ForgotPassword(ctx, req.(*ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ForgotPasswordService_ServiceDesc is the grpc.ServiceDesc for ForgotPasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForgotPasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tokopedia.auth.v1.ForgotPasswordService",
	HandlerType: (*ForgotPasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForgotPassword",
			Handler:    _ForgotPasswordService_ForgotPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokopedia/auth/v1/forgot_password.proto",
}
