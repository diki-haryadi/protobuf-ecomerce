// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tokopedia/auth/v1/update_username.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpdateUsernameServiceClient is the client API for UpdateUsernameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateUsernameServiceClient interface {
	UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*UpdateUsernameResponse, error)
}

type updateUsernameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateUsernameServiceClient(cc grpc.ClientConnInterface) UpdateUsernameServiceClient {
	return &updateUsernameServiceClient{cc}
}

func (c *updateUsernameServiceClient) UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*UpdateUsernameResponse, error) {
	out := new(UpdateUsernameResponse)
	err := c.cc.Invoke(ctx, "/tokopedia.auth.v1.UpdateUsernameService/UpdateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateUsernameServiceServer is the server API for UpdateUsernameService service.
// All implementations should embed UnimplementedUpdateUsernameServiceServer
// for forward compatibility
type UpdateUsernameServiceServer interface {
	UpdateUsername(context.Context, *UpdateUsernameRequest) (*UpdateUsernameResponse, error)
}

// UnimplementedUpdateUsernameServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUpdateUsernameServiceServer struct {
}

func (UnimplementedUpdateUsernameServiceServer) UpdateUsername(context.Context, *UpdateUsernameRequest) (*UpdateUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsername not implemented")
}

// UnsafeUpdateUsernameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateUsernameServiceServer will
// result in compilation errors.
type UnsafeUpdateUsernameServiceServer interface {
	mustEmbedUnimplementedUpdateUsernameServiceServer()
}

func RegisterUpdateUsernameServiceServer(s grpc.ServiceRegistrar, srv UpdateUsernameServiceServer) {
	s.RegisterService(&UpdateUsernameService_ServiceDesc, srv)
}

func _UpdateUsernameService_UpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateUsernameServiceServer).UpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokopedia.auth.v1.UpdateUsernameService/UpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateUsernameServiceServer).UpdateUsername(ctx, req.(*UpdateUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateUsernameService_ServiceDesc is the grpc.ServiceDesc for UpdateUsernameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateUsernameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tokopedia.auth.v1.UpdateUsernameService",
	HandlerType: (*UpdateUsernameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUsername",
			Handler:    _UpdateUsernameService_UpdateUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokopedia/auth/v1/update_username.proto",
}
