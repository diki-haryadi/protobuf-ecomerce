// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tokopedia/oauth2/v1/refresh_token.proto

package oauth2v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RefreshTokenServiceClient is the client API for RefreshTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefreshTokenServiceClient interface {
	RefreshTokenGrant(ctx context.Context, in *RefreshTokenGrantRequest, opts ...grpc.CallOption) (*RefreshTokenGrantResponse, error)
}

type refreshTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRefreshTokenServiceClient(cc grpc.ClientConnInterface) RefreshTokenServiceClient {
	return &refreshTokenServiceClient{cc}
}

func (c *refreshTokenServiceClient) RefreshTokenGrant(ctx context.Context, in *RefreshTokenGrantRequest, opts ...grpc.CallOption) (*RefreshTokenGrantResponse, error) {
	out := new(RefreshTokenGrantResponse)
	err := c.cc.Invoke(ctx, "/tokopedia.oauth2.v1.RefreshTokenService/RefreshTokenGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefreshTokenServiceServer is the server API for RefreshTokenService service.
// All implementations should embed UnimplementedRefreshTokenServiceServer
// for forward compatibility
type RefreshTokenServiceServer interface {
	RefreshTokenGrant(context.Context, *RefreshTokenGrantRequest) (*RefreshTokenGrantResponse, error)
}

// UnimplementedRefreshTokenServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRefreshTokenServiceServer struct {
}

func (UnimplementedRefreshTokenServiceServer) RefreshTokenGrant(context.Context, *RefreshTokenGrantRequest) (*RefreshTokenGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenGrant not implemented")
}

// UnsafeRefreshTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefreshTokenServiceServer will
// result in compilation errors.
type UnsafeRefreshTokenServiceServer interface {
	mustEmbedUnimplementedRefreshTokenServiceServer()
}

func RegisterRefreshTokenServiceServer(s grpc.ServiceRegistrar, srv RefreshTokenServiceServer) {
	s.RegisterService(&RefreshTokenService_ServiceDesc, srv)
}

func _RefreshTokenService_RefreshTokenGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefreshTokenServiceServer).RefreshTokenGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokopedia.oauth2.v1.RefreshTokenService/RefreshTokenGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefreshTokenServiceServer).RefreshTokenGrant(ctx, req.(*RefreshTokenGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RefreshTokenService_ServiceDesc is the grpc.ServiceDesc for RefreshTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RefreshTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tokopedia.oauth2.v1.RefreshTokenService",
	HandlerType: (*RefreshTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshTokenGrant",
			Handler:    _RefreshTokenService_RefreshTokenGrant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokopedia/oauth2/v1/refresh_token.proto",
}
