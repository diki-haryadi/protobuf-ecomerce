// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tokopedia/oauth2/v1/authorization_code.proto

package oauth2v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationCodeServiceClient is the client API for AuthorizationCodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationCodeServiceClient interface {
	AuthorizationCodeGrant(ctx context.Context, in *AuthorizationCodeGrantRequest, opts ...grpc.CallOption) (*AuthorizationCodeGrantResponse, error)
}

type authorizationCodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationCodeServiceClient(cc grpc.ClientConnInterface) AuthorizationCodeServiceClient {
	return &authorizationCodeServiceClient{cc}
}

func (c *authorizationCodeServiceClient) AuthorizationCodeGrant(ctx context.Context, in *AuthorizationCodeGrantRequest, opts ...grpc.CallOption) (*AuthorizationCodeGrantResponse, error) {
	out := new(AuthorizationCodeGrantResponse)
	err := c.cc.Invoke(ctx, "/tokopedia.oauth2.v1.AuthorizationCodeService/AuthorizationCodeGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationCodeServiceServer is the server API for AuthorizationCodeService service.
// All implementations should embed UnimplementedAuthorizationCodeServiceServer
// for forward compatibility
type AuthorizationCodeServiceServer interface {
	AuthorizationCodeGrant(context.Context, *AuthorizationCodeGrantRequest) (*AuthorizationCodeGrantResponse, error)
}

// UnimplementedAuthorizationCodeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthorizationCodeServiceServer struct {
}

func (UnimplementedAuthorizationCodeServiceServer) AuthorizationCodeGrant(context.Context, *AuthorizationCodeGrantRequest) (*AuthorizationCodeGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizationCodeGrant not implemented")
}

// UnsafeAuthorizationCodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationCodeServiceServer will
// result in compilation errors.
type UnsafeAuthorizationCodeServiceServer interface {
	mustEmbedUnimplementedAuthorizationCodeServiceServer()
}

func RegisterAuthorizationCodeServiceServer(s grpc.ServiceRegistrar, srv AuthorizationCodeServiceServer) {
	s.RegisterService(&AuthorizationCodeService_ServiceDesc, srv)
}

func _AuthorizationCodeService_AuthorizationCodeGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationCodeGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationCodeServiceServer).AuthorizationCodeGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokopedia.oauth2.v1.AuthorizationCodeService/AuthorizationCodeGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationCodeServiceServer).AuthorizationCodeGrant(ctx, req.(*AuthorizationCodeGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationCodeService_ServiceDesc is the grpc.ServiceDesc for AuthorizationCodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationCodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tokopedia.oauth2.v1.AuthorizationCodeService",
	HandlerType: (*AuthorizationCodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthorizationCodeGrant",
			Handler:    _AuthorizationCodeService_AuthorizationCodeGrant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokopedia/oauth2/v1/authorization_code.proto",
}
